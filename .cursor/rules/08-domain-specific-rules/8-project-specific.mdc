---
description: APPLY project-specific rules TO ensure consistent documentation across projects
globs: **/*
alwaysApply: true
---

# Project-Specific Rules Template

## Context
- This file is used as specification only for this project
- Use class validator for DTOs 
- DTOs shared with frontend in shared-types/'s packages

## Recommendation

### Languages
- For code and logs: English
- For labels: French language in UI and errors

### Overall Architecture
- *Project structure*: monorepo, modules, packages
- *Architectural patterns used*: (Clean Architecture for backend, Feature-based for frontend, Shared DTO between frontend and backend in packages/shared-types)

### Authentication
- *Authentication mechanisms used*: Google Oauth2 + JWT, Remix Server + Client for data fetching
- *Authentication flow*: once authenticated on Google, we use JWT with accessToken for auth
- *Session and token management*: accessToken is refreshed every 15 minutes in a dedicated route using refreshToken is cookie

### State Management
- *State management approach*: MobX
- *Organization of stores/reducers*: only stores
- *Patterns for state updates*: state and domain entirely managed by Mobx, never React Components

### API and Services
- *Service structure*: `services/` contains API calls in frontend
  - Never use `fetch` directly, always use [api-fetcher.ts](mdc:apps/frontend/app/lib/api-fetcher.ts) from [api-auth.ts](mdc:apps/frontend/app/lib/api-auth.ts) inside services like [email.service.ts](mdc:apps/backend/src/infrastructure/email/email.service.ts)
- *API call convention*s: check [swagger.json](mdc:apps/backend/swagger.json)
- *Error handling and retries*: [error.class.ts](mdc:packages/shared-types/src/error.class.ts) must be used.

### Testing
- *Testing strategy*: unit first, integration then, e2e last
- *Testing tools and frameworks*: `vitest` for frontend with `happy-dom`, never use `Jest` on frontend, `Jest` is only for backend.
- *Mocking and fixture conventions*: only mock API calls in frontend
