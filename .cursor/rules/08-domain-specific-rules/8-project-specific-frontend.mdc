---
description: APPLY project-specific rules WHEN creating / changing react code
globs: apps/frontend/**/*
alwaysApply: false
---

Global frontend rules:
- Avoid installing libs, put small effects in `hooks` folder

Structure:
features/$folder
- $file.type.ts : interfaces / types
- $file.store.ts : mobx store
- $file.component.tsx : dumb component
- $file.data.ts : shared data (optional)

## Important
- Do NOT use Remix, use React-Remix v7+

Tests:
- Mock services (e.g [auth.service.ts](mdc:apps/frontend/app/services/auth.service.ts)) because it does API calls
- When Mocking services, simply return a newly mocked typed object
- Mocked value MUST be typed

## hooks

## Shared-Typed
- DTO are located in `packages/shared-types` and shared between backend (e.g. controllers) and frontend (e.g loaders or services)
- Most of the validation is done with `class-validator`.
- One file per type, export everything from [index.ts](mdc:packages/shared-types/src/index.ts)

Styling:
- Do not use `h1`, `h2` etc, use [text.tsx](mdc:apps/frontend/app/components/ui/text.tsx) with `variant` and `as` (if necessary) - guess proper variant to use
- Do not use `p`, use `Text variant="paragraph"`

State:
- Avoid using React core methods such as `useEffect`, `useCallback`, prefer using state manager
- Prefer mobx store [3-mobx.mdc](mdc:.cursor/rules/3-frameworks-and-libraries/3-mobx.mdc)
- `useRef` is allowed, as well as framework hooks (e.g. `useForm` from NextJS or Remix)

API calls:
- Prefer React Router loader for SSR
- Use `services/` to fetch data
- Endpoints in [api-fetcher.ts](mdc:apps/frontend/app/lib/api-fetcher.ts)
- For Auth, extends [api-auth.ts](mdc:apps/frontend/app/lib/api-auth.ts), example [newsletter.service.ts](mdc:apps/frontend/app/services/newsletter.service.ts)
