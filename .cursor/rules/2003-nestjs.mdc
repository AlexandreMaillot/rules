---
description: APPLY NestJS framework standards WHEN developing with NestJS TO ensure scalable and maintainable server-side applications
globs: apps/backend/src/**/*.{controller,service,module,guard,filter,pipe,interceptor}.ts
alwaysApply: false
---

# NestJS Framework Standards

<version>1.0.0</version>

## Context
- These rules apply to all NestJS code in the backend application
- They ensure consistent implementation of NestJS patterns
- They promote maintainable and testable backend code

## Requirements

### Architecture
- Follow NestJS modular architecture
- Each feature should have its own module
- Use dependency injection for all classes
- Handle errors appropriately and consistently
- Implement proper logging

### Controllers
- Controllers should only handle HTTP requests and responses
- `ValidationPipe` might no be necessary because `main.ts` uses `useGlobalPipes`.
- Controllers receives and returns class-validator DTOs from `shared-types` for a clear, decoupled API.
- Controllers call use-cases (`commands` or `queries`), never call repositories.

Example `presentation/controllers/projects.controller.ts`:
```typescript
@ApiTags('Projects')
@Controller('projects')
export class ProjectsController {
  constructor(
    private readonly getProjectsQuery: GetProjectsQuery,
    private readonly projectMapper: ProjectMapper,
  ) {}

  @Get()
  @ApiAuthOperation("Récupérer les projets de l'utilisateur connecté.", {
    type: [Project],
  })
  async getProject(@GetUser() user: UserDomain): Promise<Project[]> {
    const projects = await this.getProjectsQuery.execute(user);

    return projects.map((project) => this.projectMapper.toDTO(project));
  }
```

### Domain Objects
- Domain objects received are validated by `class-validator`.

### Services
- Handle domain logic with specific rules or validation.
- Keep services focused on a single responsibility
- No database interaction, plain domain validation only

### Use-case Driven
- Use `Commands` and `Queries` to access DB through repositories.
- DB is NEVER called in use-case, use repositories.
- Reflects bridge between domain, infrastructure (database) and presentation (controller).
- A Use Case is the only layer handling Domain objects and business logic.

### Repositories
- Repository implements domain interface.
- Always export const with `KEY` that must be used in `controllers`, `use-cases` and `modules`.
- Type with `Model.Property` instead of primitive if possible (e.g. `email: string` -> `email: User['email']`).
- Wrap db calls in Prisma Transactions if necessary.
- A Repository returns only Domain objects, never DTOs or Prisma types.
- Prisma types stay in Repositories, never leaving Infrastructure.

Example usage in controller/use-case:
```typescript
constructor(
  @Inject(USER_REPOSITORY)
  private readonly userRepository: UserRepository,
) {}
```

Example usage in modules:
```typescript
@Module({
  imports: [PrismaModule],
  controllers: [UsersController],
  providers: [
    GetAllUsersUseCase,
    UserMapper,
    {
      provide: USER_REPOSITORY,
      useClass: PrismaUserRepository,
    },
  ],
  exports: [GetAllUsersUseCase, USER_REPOSITORY],
})
export class UsersModule {}
```

Example interface `features/users/domain/user.repository.interface.ts`:
```typescript
import type { User } from '@prisma/client';

export const USER_REPOSITORY = 'USER_REPOSITORY';

export interface UserRepository {
  findByEmail(email: User['email']): Promise<User | null>;
  findAll(): Promise<User[]>;
}
```

Example integration `features/users/infrastructure/prisma-user.repository.ts`:
```typescript
import { Injectable } from '@nestjs/common';
import { User } from '@prisma/client';

import { PrismaService } from '../../../prisma/prisma.service';
import { UserRepository } from '../domain/user.repository.interface';

@Injectable()
export class PrismaUserRepository implements UserRepository {
  constructor(private readonly prisma: PrismaService) {}

  async findByEmail(email: User['email']): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: { email },
    });
  }

  async findAll(): Promise<User[]> {
    return this.prisma.user.findMany();
  }
}

```

### Mappers
- Always protect layers from others
- Use `NestJS` DI for mappers
- Use Prisma types from [prisma.types.ts](mdc:apps/backend/src/prisma/prisma.types.ts)
- Implements [mapper.interface.ts](mdc:apps/backend/src/presentation/mapper.interface.ts).
- Reassign every props (mandatory).
- Return plain objects, no instances.
- Mappers convert between DTOs, Domain objects, and Prisma types to prevent dependencies.

Example `projects/presentation/project.mapper.ts`:
```typescript
import { ProjectDTO, ProjectStatus } from '@le-journal/shared-types';
import { Injectable } from '@nestjs/common';

import { ProjectDomain } from '../../domain/entities/project';

import { Mapper } from 'src/presentation/mapper.interface';
import { ProjectModel } from 'src/prisma/prisma.types';

@Injectable()
export class ProjectMapper implements Mapper<ProjectDomain, ProjectModel, ProjectDTO> {
  toModel(domain: ProjectDomain): ProjectModel {
    const model: ProjectModel = {
      id: domain.id,
      name: domain.name,
      slug: domain.slug,
      status: domain.status,
      ...
    };

    return model;
  }

  toDomain(model: ProjectModel, canUpdatePrompt: boolean): ProjectDomain {
    return new ProjectDomain({
      id: model.id,
      name: model.name,
      slug: model.slug,
      status: model.status as ProjectStatus,
      ...
    });
  }

  toDTO(domain: ProjectDomain): ProjectDTO {
    return {
      id: domain.id,
      name: domain.name,
      slug: domain.slug,
      status: domain.status,
      ...
    };
  }
}
```

### Testing
- Use Jest with NestJS testing utilities
- Import all necessary modules at the beginning.
- Do NOT mock database for integration tests.

### Seed
- Calling repositories might no be necessary except to validate domain logic, most of the time use prisma client directly.
- Must use types in `@prisma/client` (e.g. `Prisma.UserCreateInput`)
- Avoid delete in seeds, assume DB is mepty.
- Wrapped in transactions.
- Injected as NestJS services for DI.

## Critical Rules

<critical>
- NEVER put business logic in controllers
- ALWAYS validate input with DTOs
- ALWAYS use dependency injection
- NEVER access database directly from controllers
</critical> 
