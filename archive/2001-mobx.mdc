---
description: APPLY MobX state management patterns WHEN managing application state TO ensure predictable and efficient state updates
globs: *.store.ts,*.store.tsx
alwaysApply: false
---

# MobX State Management Standards

<version>1.0.0</version>

## Context
- These rules apply to all MobX state management code in the frontend application
- They ensure consistent implementation of MobX patterns
- They promote maintainable and testable state management

## Requirements

### Store Structure
- Organize stores by domain/feature
- Use class-based stores without decorators
- Implement proper dependency injection between stores
- Inject the store into the parent component for better state management

### Dommain logic
- Keep stores focused on a single responsibility
- Avoid technical function (e.g. `setDialogOpen`), prefer user actions (`openDialog`, `closeDialog`).

### Observables and Actions
- Use `get` for computed
- Use `makeAutoObservable` in the store constructor.
- Use `action.bound` for callback in class
- Use `computed properties` for all derived values, even small (e.g., `instructionLength`).
- Use `runInAction` for async operations and mutations.
- Prefer `reaction` over `autorun` when possible

### Testing
- Write unit tests for all stores
- Mock dependencies in store tests
- Test computed properties
- Test reactions and side effects
- Test only store (`smart`), not the UI (`dumb`).
- Use correct dependencies with proper typed params with existing functions only.
- Use real data type, never use `any`.
- Never mock store functions.

Example:
```typescript
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';

import { HeaderProfileStore } from './header-profile.store';

import type { AuthTestContext } from '~/test/auth-test.helper';
import { setupAuthenticatedTest } from '~/test/auth-test.helper';

describe('Header Profile', () => {
  let headerProfileStore: HeaderProfileStore;
  let testContext: AuthTestContext;

  beforeEach(async () => {
    testContext = await setupAuthenticatedTest();
    headerProfileStore = new HeaderProfileStore(testContext.authStore);
  });

  describe('When user logs out', () => {
    it('should logout and redirect to home page', async () => {
      testContext.mockFetcher.mockResolvedValueOnce(new Response(null, { status: 200 }));

      await headerProfileStore.handleLogout();

      expect(testContext.mockFetcher).toHaveBeenCalledTimes(1);
      expect(testContext.mockFetcher).toHaveBeenCalledWith(
        '/auth/logout',
        'POST',
        testContext.mockAccessToken,
        undefined,
      );
      expect(window.location.href).toBe('/');
    });
  });
});

```

## Examples

<example>
// Good: Well-structured MobX store
import { makeAutoObservable } from "mobx";

class UserStore {
  users = [];
  isLoading = false;
  error = null;
  
  constructor(apiService) {
    makeAutoObservable(this);
    this.apiService = apiService;
  }
  
  async fetchUsers() {
    this.isLoading = true;
    this.error = null;
    
    try {
      const users = await this.apiService.getUsers();
      runInAction(() => {
        this.users = users;
        this.isLoading = false;
      });
    } catch (error) {
      runInAction(() => {
        this.error = error;
        this.isLoading = false;
      });
    }
  }
  
  get userCount() {
    return this.users.length;
  }
}
</example>

<example type="invalid">
// Bad: Poorly structured MobX store
class BadUserStore {
  // Missing observables
  users = [];
  
  // Missing action decorator
  fetchUsers() {
    fetch('/api/users')
      .then(res => res.json())
      .then(data => {
        // Direct mutation without action
        this.users = data;
      });
  }
  
  // Unnecessary autorun in store
  constructor() {
    autorun(() => {
      console.log(this.users.length);
    });
  }
}
</example>

## Critical Rules

<critical>
- NEVER mutate state outside actions
- ALWAYS use runInAction for async operations
- ALWAYS organize stores by domain/feature
- NEVER create circular dependencies between stores
</critical> 
