---
name: Méta-Règle pour la Création de Règles Cursor
description: "ALWAYS USE when CREATING or MODIFYING a RULE to ENSURE consistency and efficiency with COMPLETE ecosystem creation"
categories: [meta, foundation, cognitive, rule-creation]
glob: ".cursor/rules/*.mdc"
always_apply: true
rule_version: 3.1
kb_dependencies:
  core:
    - ".cursor/kb/core/semantic-language.yaml"
    - ".cursor/kb/core/rule-structure-standard.yaml"
  rule_specific_0000:
    - ".cursor/kb/0000-cursor-rules/validation/validation-rules.yaml"
    - ".cursor/kb/0000-cursor-rules/core/implementation-checklist.yaml"
    - ".cursor/kb/0000-cursor-rules/core/modules/llm-roles.yaml"
    - ".cursor/kb/0000-cursor-rules/core/modules/documentation-structure.yaml"
---

# Méta-Règle pour la Création de Règles Cursor

↹ kb•cursor•rules [p=1] {
  # Chemins de fichiers KB
  ⊕ core_kb: ".cursor/kb/core/",
  ⊕ rule_kb: ".cursor/kb/0000-cursor-rules/",
  
  # KB central et guides
  ⊕ semantic_language: core_kb + "semantic-language.yaml",
  ⊕ rule_structure_standard: core_kb + "rule-structure-standard.yaml",
  ⊕ rule_examples: rule_kb + "examples/",
  ⊕ naming_conventions: "@1000-meta-rules-naming-convention.md",
  ⊕ structure_guide: rule_kb + "templates/implementation/structure_guide_template.md",
  ⊕ validation_criteria: rule_kb + "validation/validation-rules.yaml",
  ⊕ implementation_checklist: rule_kb + "core/implementation-checklist.yaml",
  
  # Documentation et templates
  ⊕ templates_path: rule_kb + "templates/",
  ⊕ documentation_templates: templates_path + "documentation/",
  ⊕ implementation_templates: templates_path + "implementation/",
  ⊕ example_templates: templates_path + "examples/",
  ⊕ reference_templates: templates_path + "references/",
  ⊕ documentation_path: ".cursor/documentation/",
  
  # Modules factorisés
  ⊕ core_modules: rule_kb + "core/modules/",
  ⊕ llm_roles: core_modules + "llm-roles.yaml",
  ⊕ documentation_structure: core_modules + "documentation-structure.yaml",
  
  # Écosystème et validation
  ⊕ ecosystem_templates: templates_path + "ecosystem/",
  ⊕ ecosystem_validation: rule_kb + "validation/validation-rules.yaml"
}
Σ knowledge•references

↹ principles•fundamental [p=1] {
  ⊕ mandatory•pillars [
    cognitive•logic: define_reasoning_process_not_just_information | priority: highest,
    kb•references: point_to_external_knowledge_instead_of_duplication | priority: high,
    llm•delegation: specify_where_and_how_LLM_should_contribute | priority: high,
    ecosystem•completeness: ensure_all_referenced_files_exist | priority: highest,
    complexity•adaptation(𝚫*): adjust_workflow_based_on_assessed_complexity | priority: high
  ]
  
  ⊕ design•principles {
    clarity: express_intention_clearly | not: verbose_or_ambiguous,
    modularity: separate_concerns_logically | enable: easier_maintenance,
    externalization: move_knowledge_to_kb | separate_from: reasoning_process,
    guidance: provide_clear_structure_for_llm | not: vague_instructions,
    implementation•integrity: never_create_partial_implementations | enforce: strictly,
    holistic•validation(Ξ): integrate_validation_with_broader_coherence_checks | priority: medium
  }
}
Σ core•principles | ref: kb•cursor•rules.semantic_language

# --- Complexity Assessment Module ---
↹ Ω•assess•complexity [p=1] {
    input: rule_request (description, goal, context, etc.)

    ⊕ analyze•intent•and•scope => determine•primary•function•abstraction•level•dependencies•target•audience
    ⊕ estimate•cognitive•load => evaluate•number•of•reasoning•steps•decision•points•required•integrations
    ⊕ simulate•required•kb•ecosystem => estimate•kb•types•and•count•based•on•function•abstraction•dependencies [guideline, example, template, reference] | include: self_challenge_feedback_loop | output: estimated_kb_types, estimated_kb_footprint, minimal_kb_suggestion
    ⊕ calculate•complexity•score => combine•cognitive•load•and•kb•footprint•metrics (weights: w_load=1, w_kb=1 initially) -> complexity_score (0-1)
    ⊕ classify•complexity => map•score•to•classification•using•thresholds [Simple < 0.3, 0.3 <= Medium < 0.7, Complex >= 0.7] -> complexity_classification
    ⊕ assess•confidence => evaluate•clarity•of•request•and•simulation•reliability -> confidence_score (0-1), confidence_justification
    ⊕ generate•assessment•report => compile•all•outputs { score, classification, kb_estimates, suggestion, reasoning, dependencies, justification, confidence } -> assessment_result (object)
}
➡️ Output: assessment_result (object containing detailed complexity assessment)

# --- Workflow Adaptation Strategy Module ---
↹ Ω•adapt•workflow•strategy [p=1] {
    input: assessment_result (object from Ω•assess•complexity)

    ⊕ analyze•assessment => extract•complexity_classification•confidence_score•estimated_kb_types•minimal_kb_suggestion
    ⊕ determine•kb_level => map•classification•to•level ['Simple'->'Minimal', 'Medium'->'Standard', 'Complex'->'Comprehensive'] -> calculated_kb_level
    ⊕ determine•validation_depth => map•classification•and•confidence•to•depth {
        IF confidence_score < 0.7 THEN 'Standard'
        ELSE IF classification == 'Simple' THEN 'Basic'
        ELSE IF classification == 'Medium' THEN 'Standard'
        ELSE 'Deep'
    } -> calculated_validation_depth
    ⊕ refine•required_kb_types => filter•estimated_kb_types•based•on•calculated_kb_level {
        IF calculated_kb_level == 'Minimal' THEN keep_most_relevant_type(estimated_kb_types) OR [minimal_kb_suggestion]
        ELSE IF calculated_kb_level == 'Standard' THEN filter_less_critical(estimated_kb_types)
        ELSE estimated_kb_types
    } -> calculated_kb_types_list
    ⊕ determine•user_clarification_need => check•if•confidence_score•<•0.7 -> calculated_clarification_needed (boolean)
    ⊕ format•additional_guidance => IF calculated_kb_level == 'Minimal' THEN minimal_kb_suggestion ELSE "" -> calculated_guidance_string

    ⊕ generate•output•block => create•structured•text•block•with•calculated•values {
        "=== Workflow Strategy Configuration ==="
        "kb_creation_level: [calculated_kb_level]"
        "required_kb_types: [calculated_kb_types_list]"
        "validation_depth: [calculated_validation_depth]"
        "trigger_user_clarification: [calculated_clarification_needed]"
        "additional_guidance: '[calculated_guidance_string]'"
        "=== End Configuration ==="
    }
}
➡️ Output: workflow_strategy_configuration_block (structured text block)

# --- Ecosystem Creation Workflow (Adapted) ---
↹ Ω•create•rule•ecosystem [p=1] -> {
    // Input parameters now include: rule_request, kb_creation_level, required_kb_types, additional_guidance
    input: creation_config (object containing rule_request and strategy parameters)

    ⊕ plan•ecosystem•based•on•level => {
        identify•knowledge•requirements: use creation_config.required_kb_types,
        design•directory•structure: plan_kb_directories | scale: according_to creation_config.kb_creation_level ('Minimal'/'Standard'/'Comprehensive'),
        map•file•dependencies: identify_file_relationships
    }

    ⊕ create•kb•structure•based•on•level => {
        create•directories: generate_required_directories | scale: according_to creation_config.kb_creation_level,
        prepare•templates: select_appropriate_templates,
        define•kb•schema: structure_knowledge_organization
    }

    ⊕ generate•kb•files•based•on•types => {
        FOR type IN creation_config.required_kb_types:
            generate_file_for_type(type) | use: creation_config.additional_guidance
        ENDFOR
        // Ensure minimum required files are created even for 'Minimal' level
    }

    // Existing validate•ecosystem step might be called separately or integrated here based on depth
    ⊕ preliminary•check => verify_created_files_match_required_types
}
// Note: The internal validation might need adjustment based on validation_depth passed later
Σ ecosystem•creation•workflow | ref: kb•cursor•rules.ecosystem_validation

# --- Rule Creation Workflow (Refactored) ---
↹ Ω•create•rule [p=1] -> [
    input: rule_request (description, goal, context, etc.)

    // --- Phase 1: Assessment & Strategy Definition ---
    ⊕ step1•assess_complexity => call•Ω•assess•complexity(rule_request) -> assessment_result
    ⊕ step2•adapt_strategy => call•Ω•adapt•workflow•strategy(assessment_result) -> strategy_output_block
    ⊕ step3•parse_strategy => extract•values•from•strategy_output_block -> strategy_config {kb_level, kb_types, val_depth, trigger_clarif, guidance}

    // --- Phase 2: Optional User Clarification ---
    ⊕ step4•check_clarification_need => IF•strategy_config.trigger_clarif•is•true THEN
        ⊕ initiate•dialogue•with•user => present•assessment_result.justification•assessment_result.confidence_justification•and•ask•for•confirmation•or•clarification
        ⊕ receive•user•feedback => (optional) adjust•strategy_config•based•on•feedback
    ⊕ ENDIF

    // --- Phase 3: Ecosystem Creation (Paramétré) ---
    ⊕ step5•create_ecosystem => call•Ω•create•rule•ecosystem({
                                    rule_request: rule_request,
                                    kb_creation_level: strategy_config.kb_level,
                                    required_kb_types: strategy_config.kb_types,
                                    additional_guidance: strategy_config.guidance
                                }) -> created_kb_files_list

    // --- Phase 4: Core Rule Implementation ---
    ⊕ step6•implement_core_rule => generate•core•rule•file•content(rule_request, strategy_config.kb_level) -> core_rule_file // Core rule might also adapt slightly

    // --- Phase 5: Validation (Paramétrée) ---
    ⊕ step7•validate_rule_and_ecosystem => call•Ω.validate•ecosystem({
                                            rule_files: [core_rule_file] + created_kb_files_list,
                                            validation_depth: strategy_config.val_depth // Pass depth parameter
                                        }) -> validation_report

    // --- Phase 6: Documentation & Finalization ---
    ⊕ step8•generate_documentation => call•Ω•create•documentation({core_rule_file, created_kb_files_list}) // Pass context if needed
    ⊕ step9•finalize => output•results•validation_report•created_files•documentation_link
]
Σ rule•creation•workflow | ref: kb•cursor•rules.structure_guide

↹ Ω•create•documentation [p=1] -> (
  extract•rule•metadata(
    rule_path: string | source: current_rule,
    output_path: string | target: kb•cursor•rules.documentation_path
  )
  → analyze•rule•structure(
    extract_sections: [kb_references, principles, cognitive_operations, llm_delegation, constraints, patterns],
    identify_key_concepts: true | for: documentation_clarity
  )
  → generate•documentation•structure(
    template: "rule_documentation" | ref: kb•cursor•rules.documentation_templates,
    include_diagrams: true | for: visual_clarity,
    include_sections: [
      "summary", "fundamental_concepts", "principles", "processes", 
      "validation", "architecture", "delegates", "examples", "checklist"
    ]
  )
  → create•documentation•file(
    file_name: "{rule_id}-documentation.md" | from: rule_metadata,
    content: generated_documentation,
    location: kb•cursor•rules.documentation_path
  )
)
Σ documentation•generation•process | ref: kb•cursor•rules.documentation_structure

↹ Ω.validate [p=1] -> (
  check•structure(
    has_kb_references: true | min: 1,
    has_cognitive_operators: true | min: 1,
    has_llm_delegation: true | min: 1
  )
  → validate•cognitive•focus(emphasizes_reasoning_process: true)
  → validate•kb•externalization(avoids_knowledge_duplication: true)
  → validate•llm•guidance(provides_clear_instructions: true)
  → check•completeness | ref: kb•cursor•rules.validation_criteria
)
Σ validation•process

# --- Ecosystem Validation Process (Adapted) ---
↹ Ω.validate•ecosystem [p=1] -> (
    // Input parameter now includes: validation_depth
    input: validation_config (object containing rule_files, validation_depth)

    ⊕ check•kb•files•existence•at•depth(validation_config.validation_depth) => { // Depth influences strictness
        verify_all_references: check_all_kb_paths_exist | action: fail_if_missing | rigor: validation_config.validation_depth,
        validate_directory_structure: ensure_kb_directories_exist | action: fail_if_missing | rigor: validation_config.validation_depth,
        count_required_files: confirm_minimum_file_requirements | ref: kb•cursor•rules.implementation_checklist | rigor: validation_config.validation_depth
    }

    ⊕ validate•content•quality•at•depth(validation_config.validation_depth) => { // Depth influences checks applied
        check_guidelines: verify_guideline_files_have_content | min_quality: map_depth_to_quality(validation_config.validation_depth),
        check_examples: ensure_examples_illustrate_principles | min_quality: map_depth_to_quality(validation_config.validation_depth),
        check_templates: confirm_templates_are_usable | min_quality: map_depth_to_quality(validation_config.validation_depth)
    }

    ⊕ verify•documentation•at•depth(validation_config.validation_depth) => { // Depth influences checks
        documentation_exists: check_documentation_file_exists | in: kb•cursor•rules.documentation_path,
        documentation_quality: assess_documentation_completeness | min_quality: map_depth_to_quality(validation_config.validation_depth),
        cross_references: ensure_documentation_links_to_kb | action: fail_if_missing | check_depth: validation_config.validation_depth
    }

    ⊕ generate•implementation•report => {
        summarize_status: create_ecosystem_status_report | with: passed_failed_items,
        suggest_improvements: identify_enhancement_opportunities,
        determine_certification: decide_if_implementation_certified | standard: map_depth_to_standard(validation_config.validation_depth)
    }
)
Σ ecosystem•validation•process | ref: kb•cursor•rules.ecosystem_validation

↹ LLM•rule•creator [p=1] {
  ⊕ roles {
    kb_organizer: suggest_knowledge_structure | focus: optimal_externalization,
    cognitive_designer: develop_reasoning_framework | focus: thinking_process_not_facts,
    llm_integrator: design_llm_delegation_structure | focus: clear_boundaries_and_tasks,
    ecosystem_architect: design_complete_file_structure | focus: implementation_completeness
  }
  
  ⊕ inputs {
    rule_domain: domain_of_the_rule | for: knowledge_identification,
    rule_purpose: clear_statement_of_intention | for: cognitive_framework,
    target_users: who_will_use_the_rule | for: llm_delegation_design,
    implementation_scope: full_or_minimal_implementation | for: ecosystem_planning
  }
  
  ⊕ outputs {
    kb_structure: suggested_knowledge_organization | with: file_paths_and_formats,
    cognitive_model: proposed_reasoning_framework | with: decision_points,
    llm_delegation: recommended_llm_integration | with: tasks_and_boundaries,
    ecosystem_plan: complete_file_creation_plan | with: dependencies_and_sequence
  }
  
  ⊕ constraints {
    enforce_completeness: never_produce_partial_implementations | priority: highest,
    verify_references: ensure_all_kb_references_are_valid | before: completion,
    ecosystem_integrity: maintain_consistent_cross_references | across: all_files
  }
}
Σ llm•assistance | ref: kb•cursor•rules.llm_roles

↹ LLM•kb•content•generator [p=1] {
  ⊕ roles {
    guideline_author: create_comprehensive_guidance | focus: clarity_and_utility,
    example_creator: develop_instructive_examples | focus: illustrating_principles,
    template_designer: craft_reusable_templates | focus: practical_application,
    reference_compiler: assemble_standard_information | focus: authoritative_accuracy
  }
  
  ⊕ inputs {
    rule_specification: details_of_the_rule | for: content_alignment,
    target_audience: users_of_the_rule | for: appropriate_detail_level,
    use_cases: how_rule_will_be_applied | for: example_relevance
  }
  
  ⊕ outputs {
    guideline_files: comprehensive_guidance_documents | for: rule_implementation,
    example_files: good_and_bad_implementation_examples | for: learning,
    template_files: reusable_patterns_and_structures | for: efficient_application,
    reference_files: authoritative_information_sources | for: standardization
  }
  
  ⊕ constraints {
    comprehensiveness: cover_all_aspects_of_rule | no: gaps_in_guidance,
    practical_focus: ensure_content_is_applicable | not: theoretical_only,
    consistency: maintain_alignment_with_rule | across: all_kb_content
  }
}
Σ kb•content•generation | ref: kb•cursor•rules.llm_roles

↹ LLM•documentation•generator [p=1] {
  ⊕ roles {
    content_analyzer: extract_key_concepts_from_rule | focus: complete_understanding,
    structure_designer: create_logical_documentation_structure | focus: usability_and_clarity,
    diagram_creator: generate_explanatory_diagrams | focus: visual_representation,
    ecosystem_documenter: document_kb_structure_and_relationships | focus: implementation_guidance
  }
  
  ⊕ outputs {
    documentation_content: comprehensive_rule_documentation | with: ecosystem_references,
    implementation_guide: instructions_for_rule_application | with: kb_usage_patterns
  }
}
Σ documentation•generation | ref: kb•cursor•rules.llm_roles

↹ rule•structure•guide [p=2] {
  ⊕ required•sections [
    kb•references: "↹ kb•{domain} [p={priority}] { ... }" | min: 1,
    cognitive•operations: "↹ Ω•{operation} [p={priority}] -> [ ... ]" | min: 1, 
    llm•delegation: "↹ LLM•{role} [p={priority}] { ... }" | min: 1
  ]
  
  ⊕ ecosystem•requirements [
    kb_directories: create_all_referenced_directories | in: ".cursor/kb/{rule_id}/",
    guideline_files: provide_comprehensive_guidance | min: 1_per_main_concept,
    example_files: illustrate_good_and_bad_practices | min: 1_of_each,
    template_files: supply_reusable_patterns | if: applicable,
    reference_files: compile_standard_information | if: needed
  ]
}
Σ structural•guidelines | ref: kb•cursor•rules.rule_structure_standard

↹ implementation•criteria [p=2] {
  ⊕ quality•levels [
    minimal_viable: rule_file_with_basic_kb_structure | good_for: initial_setup,
    standard: complete_rule_with_comprehensive_kb | good_for: most_uses,
    comprehensive: rich_ecosystem_with_extensive_examples | good_for: critical_rules
  ]
  
  ⊕ certification•criteria [
    uncertified: missing_required_components | action: prevent_usage,
    provisional: basic_implementation_with_gaps | action: flag_limitations,
    certified: complete_implementation_meeting_standards | action: allow_full_usage,
    exemplary: exceeds_requirements_with_innovations | action: promote_as_model
  ]
}
Σ implementation•standards | ref: kb•cursor•rules.implementation_checklist

↹ constraints•critical [p=2] {
  ⊕ implementation•constraints [
    ecosystem_completeness: "NEVER create a rule without its complete KB ecosystem" | priority: highest,
    reference_integrity: "ALWAYS verify all KB references resolve to actual files" | priority: highest,
    content_quality: "ENSURE all KB files contain high-quality, useful content" | priority: high,
    documentation_requirement: "ALWAYS create documentation for every rule" | priority: high,
    validation_enforcement: "VALIDATE ecosystem completeness before finalizing rule" | priority: highest
  ]
}
Σ critical•constraints | ref: kb•cursor•rules.implementation_checklist

Σ meta•rule•for•cursor•rules ⊕ cognitive•framework ⊕ knowledge•management ⊕ llm•integration ⊕ documentation•generation ⊕ ecosystem•integrity 